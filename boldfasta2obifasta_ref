#!/usr/bin/Rscript

# This script converts DNA sequences downloaded from BOLD and retrieves the taxonomic identifier of the taxon from NCBI taxonomy,
# to create a new fasta file with the following information to be used with OBITools: taxid, scientific_name, and record id (from BOLD).
# It is necessary to have downloaded and extracted the NCBI taxdump (wget -m ftp.ncbi.nlm.nih.gov/pub/taxonomy/new_taxdump/new_taxdump.tar.gz)
# For those taxa not included in NCBI taxonomy the script will look for the immediate parent in BOLD, and register the name change.
# Author: Daniel Marquina

library(bold)
suppressMessages(library(data.table))
suppressMessages(library(tidyverse))
suppressMessages(library(CHNOSZ))
suppressMessages(library(seqinr))
library(optparse)
lenght=length

# Set file names for input and output files
options( warn = -1 )

option_list = list(
  make_option(c("-i", "--input_fasta"), type="character", default=NULL,
              help="fasta file with the sequences to be renamed", metavar="character"),
  make_option(c("-o", "--output_fasta"), type="character", default=NULL,
              help="Output file name [default = input file ending in _taxid.csv]", metavar="character"),
  make_option(c("-d", "--directory"), type="character", default=NULL,
              help="Directory where NCBI's taxdump is stored [default = current directory]", metavar="character"),
  make_option(c("-r", "--rank"), type="character", default=NULL,
              help="Rank of the taxonomic group of interest [default = kingdom]", metavar="character"),
  make_option(c("-t", "--taxon"), type="character", default=NULL,
              help="Taxon of interest [default = Metazoa]", metavar="character")
)

opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);

if (is.null(opt$input_fasta)){
  print_help(opt_parser)
  stop("At least one file must be provided: input fasta with the sequences to be renamed.", call.=FALSE)
}

if (is.null(opt$output_fasta)){
  opt$output_fasta <- paste(substr(opt$input_fasta,1,nchar(opt$input_fasta)-6),"_taxid.fasta",sep="")
}

if (is.null(opt$directory)){
  opt$directory <- getwd()
}

if (is.null(opt$rank)){
  opt$rank <- "kingdom"
}

if (is.null(opt$taxon)){
  opt$taxon <- "Metazoa"
}

infile <- opt$input_fasta
outfile <- opt$output_fasta
directory <- opt$directory
rank_subset <- opt$rank
taxon_subset <- opt$taxon


# Define functions to extract NCBI taxids and ranks
taxon2id <- function(x){
  nameidx <- onlytaxonnames[name == x][1]
  if(nrow(nameidx) == 0){
    return(NA)
  } else {
    return(nameidx$id)
  }
}
id2rank <- function(x){
  ididx <- taxranks[id == x]
  if(nrow(ididx) == 0){
    return(NA)
  } else {
    return(as.character(ididx$rank))
  }
}

# Import sequences
message("Reading reference fasta file from BOLD", "\r", appendLF = T)
seq_no_taxid <- read.fasta(infile, as.string = T, whole.header = T, forceDNAtolower=F)
message("> Imported ", length(seq_no_taxid), " sequences", "\n", appendLF = T)


# Import taxonomy info
message("Reading NCBI's taxonomy database", "\r", appendLF = T)
taxnames <- suppressMessages(data.table(read_tsv(paste(directory, "/rankedlineage.dmp", sep=""))))
colnames(taxnames) = c("id","", "name","", "species","", "genus","", "family","", "order","", "class","","phylum","", "kingdom","", "dominion", "")
message("Read ", length(taxnames$id), " records", "\r", appendLF = T)
setkeyv(taxnames, c("name", "id", rank_subset))
onlytaxonnames <- taxnames[get(rank_subset) == taxon_subset]
message("Reducing database to include only ", dim(onlytaxonnames)[1], " records from ", rank_subset, " ", taxon_subset,   "\r", appendLF = T)
taxranks <- data.table(getnodes(directory))
setkey(taxranks, id, rank)
message("> Taxonomy database ready", "\n", appendLF = T)


# Preparing sequence headers for query
seq_names <- getName(seq_no_taxid)
boldids <- gsub("\\|.*","", seq_names)
boldnames <- sapply(strsplit(seq_names, split="\\|"), '[[' ,2)
ori_names <- boldnames
for (i in 1:length(boldnames)){
  if (length(grep("sp.", boldnames[i]))!=0){
    boldnames[i] <- strsplit(boldnames[i], " ")[[1]][1]
  } else{}
  if (length(grep("cf.", boldnames[i]))!=0){
    boldnames[i] <- strsplit(boldnames[i], " ")[[1]][1]
  } else{}
  if (length(grep("aff.", boldnames[i]))!=0){
    boldnames[i] <- strsplit(boldnames[i], " ")[[1]][1]
  } else{}
}

# Query
message("Extracting taxid & ranks from NCBI taxonomy", "\r", appendLF = T)
taxid <- unlist(sapply(boldnames, taxon2id))
rank <- sapply(taxid, id2rank)
message("Taxid and rank recorded for ", length(na.omit(taxid)), " out of ", length(boldnames), " sequences", "\n", appendLF = T)

# Re-name sequences with parent taxon
message("Searching BOLD for parents of missed taxa", "\r", appendLF = T)
for (i in 1:lenght(taxid)){
  if (is.na(taxid[i])==T){
    while (nrow(taxnames[taxnames$name==boldnames[i],1])==0){
      bold_tax <- bold_tax_name(boldnames[i])
      parent_tax <- ifelse(length(bold_tax)!=1, bold_tax$parentname, strsplit(boldnames[i], ' ')[[1]][1])
      Sys.sleep(.5)
      if (length(parent_tax)==0 || parent_tax==boldnames[i]){
        break
      } else {
        boldnames[i] <- parent_tax
      }
    }
    taxid[i] <- taxon2id(boldnames[i])
    rank[i] <- id2rank(taxid[i])
  } else {}
}
taxid[which(is.na(taxid)==T)] <- "not found"
rank[which(is.na(taxid)==T)] <- "not found"
message("! Taxid and rank could not be found for ", lenght(taxid)-length(taxid[taxid!="not found"]), " sequences", "\n", appendLF = T)

# Write new fasta with new names
newname <- NULL
for (i in 1:length(taxid)){
  if (taxid[i]=="not found"){
    newname[i] <- paste(boldids[i]," scientific_name=", boldnames[i], "; taxid=",taxid[i],"; rank=",rank[i],"; original_db_name=", ori_names[i], ";", sep = "")
    } else {
    newname[i] <- paste(boldids[i]," scientific_name=", boldnames[i], "; taxid=",taxid[i],"; rank=",rank[i],";", sep = "")
  }
}

for (i in 1:length(seq_no_taxid)){
  seq_no_taxid[[i]][1] <- gsub("-", "", getSequence(seq_no_taxid, as.string = T)[[i]])
}
write.fasta(seq_no_taxid, newname, outfile, as.string = T, open = "w", nbchar = max(getLength(seq_no_taxid)))
message(outfile, " created with NCBI taxids", "\n", appendLF = T)

