#!/usr/bin/env Rscript

#This script sends COI sequences to BOLD and retrieves the best hit together with the similarity between query and hit using the API system.
#It also retrieves the taxonomy of the species identified and assigns the correct lowest rank possible to the identification based on similarity thresholds.
library(optparse)
library(XML)
library(curl)
library(bold)
library(seqinr)
library(tibble)
lenght=length

#Set file names for input and output files
options( warn = -1 )

option_list = list(
  make_option(c("-f", "--input_fasta"), type="character", default=NULL,
              help="fasta file with the centroid sequences to identify", metavar="character"),
  make_option(c("-t", "--taxonomy_table"), type="character", default=NULL,
              help="Output file name [default = input file ending in _taxonomy.csv]", metavar="character")
)

opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);

if (is.null(opt$input_fasta)){
  print_help(opt_parser)
  stop("At least one file must be provided: input fasta table with with the centroid sequences to identify.", call.=FALSE)
}

if (is.null(opt$taxonomy_table)) {
  opt$taxonomy_table <- paste(substr(opt$input_fasta,1,nchar(opt$input_fasta)-6),"_taxonomy.csv",sep="")
}

# Read in sequences

query_seqs <- read.fasta(opt$input_fasta)

# Loop over sequences and get best match from BOLD

taxa_seq <- NULL
taxa_BOLD <- NULL
similarities <- NULL
seqq <- NULL
taxa_record <- NULL
options(warn=-1)



####AÃ‘ADIR BIN NUMBER! (work in progress...)



for (i in 1:length(query_seqs)) {
  if (i < length(query_seqs)){
    message("Matching sequence ", i," of ",length(query_seqs), "\r", appendLF = FALSE)
  } else {message("Matching sequence ", i, " of ",length(query_seqs),"\n")}
	seq <-getSequence(query_seqs[i], as.string=T)[[1]][[1]]
	seqq[i] <- seq <-getSequence(query_seqs[i], as.string=T)[[1]][[1]]
	sendurl <- paste("http://v4.boldsystems.org/index.php/Ids_xml?db=COX1&sequence=", seq, sep="")
	http_request <- curl(url=sendurl)
	matches <- suppressMessages(readLines(http_request))
	if ( matches != "<?xml version=\"1.0\"?><matches></matches>") {
		bestmatch <- xmlToList(matches)[1]
    taxa_seq[i] <- names(query_seqs[i])
		taxa_BOLD[i] <- bestmatch$match$taxonomicidentification
		taxa_record[i] <- bestmatch$match$ID
		similarities[i] <- bestmatch$match$similarity
	} else {
	  seq_rev <- paste(rev(comp(strsplit(seq[[1]], "")[[1]])), collapse="")
	  sendurl <- paste("http://v4.boldsystems.org/index.php/Ids_xml?db=COX1&sequence=", seq_rev, sep="")
	  http_request <- curl(url=sendurl)
	  matches_rev <- suppressMessages(readLines(http_request))
	  if ( matches_rev != "<?xml version=\"1.0\"?><matches></matches>") {
	    bestmatch <- xmlToList(matches)[1]
	    taxa_seq[i] <- names(query_seqs[i])
	    taxa_BOLD[i] <- bestmatch$match$taxonomicidentification
	    taxa_record[i] <- bestmatch$match$ID
	    similarities[i] <- bestmatch$match$similarity
	  } else {
	  taxa_seq[i] <- names(query_seqs[i])
		taxa_BOLD[i] <- "no_match"
		taxa_record[i] <- "no_match"
		similarities[i] <- "no_match"
	  }
	}
}

Species <- NULL
Genus <- NULL
Family <- NULL
Order <- NULL
Class <- NULL
Phylum <- NULL
for (i in 1:length(taxa_BOLD)){
  if (i < length(taxa_BOLD)){
    message("Matching taxonomy ", i, "\r", appendLF = FALSE)
  } else {message("Matching taxonomy ", i, " of ",length(taxa_BOLD), "\n")}
  if (taxa_BOLD[i]!="no_match"){
    if (bold_tax_name(taxa_BOLD[i])$tax_rank=="species"){
      Species[i] <- bold_tax_name(taxa_BOLD[i])$taxon
      Genus[i] <- bold_tax_name(taxa_BOLD[i])$parentname
      genus <- Genus[i]
      while (bold_tax_name(bold_tax_name(genus)$parentname)$tax_rank!="family"){
        genus <- bold_tax_name(genus)$parentname
        genus <- genus
      }
      Family[i] <- bold_tax_name(genus)$parentname
      Order[i] <- bold_tax_name(Family[i])$parentname
      Class[i] <- bold_tax_name(Order[i])$parentname
      Phylum[i] <- bold_tax_name(Class[i])$parentname
    } else {
      if (bold_tax_name(taxa_BOLD[i])$tax_rank=="genus"){
        Species[i] <- "no_match"
        Genus[i] <- bold_tax_name(taxa_BOLD[i])$taxon
        genus <- Genus[i]
        while (bold_tax_name(bold_tax_name(genus)$parentname)$tax_rank!="family"){
          genus <- bold_tax_name(genus)$parentname
          genus <- genus
        }
        Family[i] <- bold_tax_name(genus)$parentname
        Order[i] <- bold_tax_name(Family[i])$parentname
        Class[i] <- bold_tax_name(Order[i])$parentname
        Phylum[i] <- bold_tax_name(Class[i])$parentname
      } else {
        if (bold_tax_name(taxa_BOLD[i])$tax_rank %in% c("subfamily", "tribe")){
          Species[i] <- "no_match"
          Genus[i] <- "no_match"
          Family[i] <-  bold_tax_name(taxa_BOLD[i])$parentname
          while (bold_tax_name(Family[i])$tax_rank!="family"){
            family <- bold_tax_name(Family[i])$parentname
            Family[i] <- family
          }
          Order[i] <- bold_tax_name(Family[i])$parentname
          Class[i] <- bold_tax_name(Order[i])$parentname
          Phylum[i] <- bold_tax_name(Class[i])$parentname
        } else {
          if (bold_tax_name(taxa_BOLD[i])$tax_rank=="family"){
            Species[i] <- "no_match"
            Genus[i] <- "no_match"
            Family[i] <- bold_tax_name(taxa_BOLD[i])$taxon
            Order[i] <- bold_tax_name(Family[i])$parentname
            Class[i] <- bold_tax_name(Order[i])$parentname
            Phylum[i] <- bold_tax_name(Class[i])$parentname
          } else {
            if (bold_tax_name(taxa_BOLD[i])$tax_rank=="order"){
              Species[i] <- "no_match"
              Genus[i] <- "no_match"
              Family[i] <- "no_match"
              Order[i] <- bold_tax_name(taxa_BOLD[i])$taxon
              Class[i] <- bold_tax_name(Order[i])$parentname
              Phylum[i] <- bold_tax_name(Class[i])$parentname
            } else {
              if (bold_tax_name(taxa_BOLD[i])$tax_rank=="class"){
                Species[i] <- "no_match"
                Genus[i] <- "no_match"
                Family[i] <- "no_match"
                Order[i] <- "no_match"
                Class[i] <- bold_tax_name(taxa_BOLD[i])$taxon
                Phylum[i] <- bold_tax_name(Class[i])$parentname
              } else {
                if (bold_tax_name(taxa_BOLD[i])$tax_rank=="phylum"){
                  Species[i] <- "no_match"
                  Genus[i] <- "no_match"
                  Family[i] <- "no_match"
                  Order[i] <- "no_match"
                  Class[i] <- "no_match"
                  Phylum[i] <- bold_tax_name(taxa_BOLD[i])$taxon
                } else {}
              }
            }
          }
        }
      }
    }
  } else{
    Species[i] <- "no_match"
    Genus[i] <- "no_match"
    Family[i] <- "no_match"
    Order[i] <- "no_match"
    Class[i] <- "no_match"
    Phylum[i] <- "no_match"
  }
}

BOLDhit_results <-data.frame(id=taxa_seq, phylum_name=Phylum, class_name=Class, order_name=Order, family_name=Family, genus_name=Genus, species_name=Species, BOLD_hit=taxa_BOLD, BOLD_record=taxa_record, best_identity=as.numeric(similarities), sequence=seqq)

Rank <- NULL
for (i in 1:lenght(BOLDhit_results[,1])){
  if (BOLDhit_results$BOLD_hit[i]!="no_match"){
    if (BOLDhit_results$best_identity[i] < 0.85){
      BOLDhit_results$order_name[i] <- "no_match"
      BOLDhit_results$family_name[i] <- "no_match"
      BOLDhit_results$genus_name[i] <- "no_match"
      BOLDhit_results$species_name[i] <- "no_match"
    } else{
      if (BOLDhit_results$best_identity[i] < 0.90){
        BOLDhit_results$family_name[i] <- "no_match"
        BOLDhit_results$genus_name[i] <- "no_match"
        BOLDhit_results$species_name[i] <- "no_match"
      } else{
        if (BOLDhit_results$best_identity[i] < 0.95){
          BOLDhit_results$genus_name[i] <- "no_match"
          BOLDhit_results$species_name[i] <- "no_match"
        } else{
          if (BOLDhit_results$best_identity[i] < 0.98){
            BOLDhit_results$species_name[i] <- "no_match"
          }
        }
      }
    }
    if (Species[i]=="no_match"){
      if (Genus[i]=="no_match"){
        if(Family[i]=="no_match"){
          if(Order[i]=="no_match"){
            Rank[i] <- "class"
          } else {Rank[i] <- "order"}
        } else {Rank[i] <- "family"}
      } else { Rank[i] <- "genus"}
    } else {Rank[i] <- "species"}
  } else{
    Rank[i] <- "no_rank"
  }
}

BOLDhit_results <- add_column(BOLDhit_results, rank=Rank, .after="id")
BOLDhit_results$identity <- as.character(BOLDhit_results$identity)

write.csv2(BOLDhit_results, opt$taxonomy_table, row.names = F)
message("~ ")
message("~ ")
message(length(which(BOLDhit_results$Rank=="species")), " MOTUs identified at species level, ", length(which(BOLDhit_results$Rank %in% c("genus", "family", "order", "class"))), " MOTUs identified at other levels, and ", length(which(BOLDhit_results$Rank=="no_rank")), " MOTUs not identified")
