#!/usr/bin/env Rscript

# This script is a post-bioinformatic curation of the dataset after the metabarcoding pipeline. Three main functions:
# Removes low abundance reads on each sample subjected to tag switching
# Removes low abundance MOTUs with less than X reads in total in all the samples
# Collapses MOTUs with the same species identification (only those above a similarity threshold with the reference sequence)
# Author: Daniel Marquina

library(optparse)
options( warn = -1 )

option_list = list(
  make_option(c("-i", "--input_table"), type="character", default=NULL,
              help="MOTU table with MOTUs in rows and samples in columns", metavar="character"),
  make_option(c("-o", "--output_table"), type="character", default=NULL,
              help="Output file name [default = input file ending in curated.csv]", metavar="character"),
  make_option(c("-t", "--mistagging"), type="numeric", default=0.001,
              help="Proportion of reads in the total dataset suspected of being assigned to samples by error (tag switching)", metavar="number"),
  make_option(c("-r", "--reads_minimum"), type="integer", default=3,
              help="Minimum number of total reads for a MOTU to be considered a true occurrence",metavar="number"),
  make_option(c("-a", "--aggregate"), type="character", default="no",
              help="Whether you want to aggregate MOTUs with coincident species determination into a single occurrence", metavar="character"),
  make_option(c("-s", "--similarity"), type="numeric", default=0.95,
              help="Minimum similarity percentage with the reference sequence to allow aggregation by species name", metavar="number")
)

opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);

if (is.null(opt$input_table)){
  print_help(opt_parser)
  stop("At least one file must be provided: input .csv table with taxonomy, abundances and sequences.", call.=FALSE)
}

if (is.null(opt$output_table)) {
  opt$output_table <- paste(substr(opt$input_table,1,nchar(opt$input_table)-4),"_curated.csv",sep="")
}


###

library(tibble)
suppressMessages(library(dplyr))

OTUS <- read.csv2(opt$input_table, header=T, sep = ";")
OTUS$taxid <-as.factor(OTUS$taxid)
OTU_abundance <- sapply(OTUS, is.numeric)
OTUS_reads <- OTUS[,OTU_abundance]
message("~ ")
message("~ ")
message("~ Reading original table with ", length(OTUS[,1])," MOTUs in ", length(OTUS_reads), " samples")

message("~ ")
message("~ ")
message("~ Removing false MOTU occurrences suspected of tag switching")
OTUS.goodtags <- OTUS
total_sample <- NULL
for (i in 1:length(OTUS_reads)) {
  total_sample[i] <- sum(OTUS_reads[,i])
  if (i < length(OTUS_reads)){
    message("In progress... sample ",i, " of ", length(OTUS_reads)," samples", "\r", appendLF = FALSE)
  } else {message("In progress... sample ",i, " of ", length(OTUS_reads)," samples")}
  for (j in 1:length(OTUS[,1])) {
    if (OTUS.goodtags[j,which(OTU_abundance)[i]] < (total_sample[i]*as.numeric(opt$mistagging))) {
      OTUS.goodtags[j,which(OTU_abundance)[i]] <- 0
    } else {
      OTUS.goodtags[j,which(OTU_abundance)[i]] <- OTUS[j, which(OTU_abundance)[i]]
    }
  }
}
message("  -> The table has been cleaned of false MOTU occurrences: reads representing less than ", opt$mistagging*100, " % of the sample total are considered absent in the sample")

message("~ ")
message("~ ")
message("~ Removing low OTU_abundance MOTUs")
OTUS.goodtags.sum <- add_column(OTUS.goodtags, total.reads = rowSums(OTUS.goodtags[c(which(OTU_abundance))]), .before = "sequence")
OTUS.goodtags.minreads <- OTUS.goodtags[!(OTUS.goodtags.sum$total.reads<opt$reads_minimum),]
message("  -> The table has been cleaned of low abundance MOTUs: records with less than ", opt$reads_minimum, " reads are considered false MOTUs")

if (opt$aggregate == "yes"){
  message("~ ")
  message("~ ")
  message("~ Aggregating MOTUs with coincident species-level determination accounting for % identity")
  OTUS.goodtags.minreads$best_identity <- as.factor(OTUS.goodtags.minreads$best_identity)
  OTUS_no_species <- OTUS.goodtags.minreads[OTUS.goodtags.minreads$rank!="species",]
  OTUS_species <- OTUS.goodtags.minreads[OTUS.goodtags.minreads$rank=="species",]
  OTUS_no_species <- rbind(OTUS_no_species, OTUS_species[as.numeric(as.character(OTUS_species$best_identity))<as.numeric(opt$similarity),])
  message("Ignoring ", length(OTUS_no_species[,1]), " MOTUs with taxonomic rank of genus or higher")
  OTUS_species <- OTUS_species[-which(as.numeric(as.character(OTUS_species$best_identity))<as.numeric(opt$similarity)),]
  OTUS_species <- OTUS_species[order(OTUS_species$species_name),]
  original_MOTUs <- length(OTUS_species[,1])
  OTUS_species_abundance <- which(sapply(OTUS_species, is.numeric)==T)
  OTUS_samples <- names(OTUS_species_abundance)
  OTUS_species.sum <- add_column(OTUS_species, total.reads = rowSums(OTUS_species[c(OTUS_species_abundance)]))
  OTUS_species$best_identity <- as.character(OTUS_species$best_identity)
  OTUS_species$taxid <- as.character(OTUS_species$taxid)
  OTUS_species_info <- sapply(OTUS_species, is.character)
  OTUS_species_taxonomy <- names(which(OTUS_species_info==T))
  OTUS_species_taxonomy <- noquote(OTUS_species_taxonomy[OTUS_species_taxonomy!=c("sequence")])
  Unique_species_reads <- data.frame(OTUS_species %>% group_by(species_name) %>% summarise_if(is.numeric, funs(sum), order=T))
  reads_good <- Unique_species_reads[,-1]-1
  Unique_species_reads <- cbind(Unique_species_reads[,1], reads_good)
  names(Unique_species_reads)[1] <- "species_name"
  representative_seq <- NULL
  aggregated_MOTUs_id <- NULL
  aggregated_MOTUs_seqs <- NULL
  MOTU_no <- NULL
  aggregated_species_taxo <- as.data.frame(matrix(nrow = 0, ncol = length(OTUS_species_taxonomy)))
  aggregated_species_reads <- as.data.frame(matrix(nrow = length(OTUS_samples), ncol = 0))
  sequences <- NULL
  for (i in 1:length(Unique_species_reads[,1])){
    representative_seq <- which(OTUS_species.sum$total.reads == max(OTUS_species.sum[OTUS_species.sum$species_name==Unique_species_reads$species_name[i],]$total.reads))
    potential_motu <- which(OTUS_species$species_name==Unique_species_reads$species_name[i])
    MOTU_no[i] <- representative_seq[which(representative_seq %in% potential_motu)]
    aggregated_species_taxo <- rbind(aggregated_species_taxo, OTUS_species[MOTU_no[i],c(OTUS_species_taxonomy)])
    aggregated_species_reads <- rbind(aggregated_species_reads, Unique_species_reads[i,c(OTUS_samples)])
    sequences <- c(sequences, as.character(OTUS_species$sequence[MOTU_no[i]]))
    aggregated_MOTUs_id <- c(aggregated_MOTUs_id, list(as.character(OTUS_species.sum[OTUS_species.sum$species_name==unique(OTUS_species.sum$species_name)[i],]$id)))
  }
  
  aggregated_MOTUs <- length(aggregated_species_taxo[,1])
  aggregated_species <- cbind(aggregated_species_taxo,
                              aggregated_species_reads,
                              sequence=sequences,
                              aggregated_ids=noquote(aggregated_MOTUs_id))
  message("  -> A total of ", original_MOTUs, " MOTUs have been collapsed into ", aggregated_MOTUs, " species")
  
  message("~ ")
  message("~ ")
  message("~ Generating the final curated table")
  OTUS_no_species <- cbind(OTUS_no_species, aggregated_ids=OTUS_no_species$id)
  final_table <- rbind(aggregated_species, OTUS_no_species)
} else {
  message("~ ")
  message("~ ")
  message("~ Generating the final curated table")
  final_table <- OTUS.goodtags.minreads
}

write.csv2(final_table, opt$output_table, row.names = F)
message("~ ")
message("~ ")
message("  -> Final table ", opt$output_table, "  has been written with ", length(final_table[,1]), " MOTUs <-")
