#!/usr/bin/env Rscript

# This script converts DNA sequences downloaded from SILVA and retrieves the taxonomic identifier of the taxon from NCBI taxonomy, to create a new fasta file with the following information to be used with OBITools: taxid, scientific_name, and record id (from SILVA). It also translates RNA to DNA (U to T).
# It is necessary to have downloaded and extracted the NCBI new taxdump (<<wget -m ftp.ncbi.nlm.nih.gov/pub/taxonomy/new_taxdump/new_taxdump.tar.gz>>)
# This script is a version of 'bold2obiref', available also in my repository..
# Author: Daniel Marquina

suppressMessages(library(data.table))
suppressMessages(library(tidyverse))
suppressMessages(library(CHNOSZ))
suppressMessages(library(seqinr))
library(readr)
library(optparse)
lenght=length

# Set file names for input and output files
options( warn = -1 )

option_list = list(
  make_option(c("-i", "--input_fasta"), type="character", default=NULL,
              help="fasta file with the sequences to be renamed", metavar="character"),
  make_option(c("-o", "--output_fasta"), type="character", default=NULL,
              help="Output file name [default = input file ending in _taxid.csv]", metavar="character"),
  make_option(c("-d", "--taxonomy_directory"), type="character", default=NULL,
              help="Directory where NCBI's taxdump is stored [default = current directory]", metavar="character")
 )

opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);

if (is.null(opt$input_fasta)){
  print_help(opt_parser)
  stop("At least one file must be provided: input fasta with the sequences to be renamed.", call.=FALSE)
}

if (is.null(opt$output_fasta)){
  opt$output_fasta <- paste0(substr(opt$input_fasta,1,nchar(opt$input_fasta)-6),"_taxid.fasta")
}

if (is.null(opt$taxonomy_directory)){
  opt$taxonomy_directory <- getwd()
}

if (is.null(opt$rank)){
  opt$rank <- NULL
}

if (is.null(opt$taxon)){
  opt$taxon <- NULL
}

if (is.null(opt$Forward_primer)){
  forward <- NULL
} else {
  forward <- as.SeqFastadna(opt$Forward_primer)
}

if (is.null(opt$Reverse_primer)){
  reverse <- NULL
} else {
  reverse <- as.SeqFastadna(toupper(paste(rev(comp(strsplit(opt$Reverse_primer, "")[[1]])), collapse="")))
}

infile <- opt$input_fasta
outfile <- opt$output_fasta
taxonomy_directory <- opt$taxonomy_directory
rank_subset <- opt$rank
taxon_subset <- opt$taxon


# Define functions to extract NCBI taxids and ranks
taxon2id <- function(x){
  nameidx <- taxnames[name == x][1]
  if(nrow(nameidx) == 0){
    return(NA)
  } else {
    return(nameidx$id)
  }
}
id2rank <- function(x){
  ididx <- taxranks[id == x]
  if(nrow(ididx) == 0){
    return(NA)
  } else {
    return(as.character(ididx$rank))
  }
}

# Import sequences
message("Reading reference fasta file from SILVA", "\r", appendLF = T)
seq_no_taxid <- read.fasta(infile, as.string = T, whole.header = T, forceDNAtolower=F)
message("> Imported ", length(seq_no_taxid), " sequences", "\n", appendLF = T)


# Import taxonomy info
message("Reading NCBI's taxonomy database", "\r", appendLF = T)
taxnames <- suppressMessages(data.table(read_tsv(paste0(taxonomy_directory, "/rankedlineage.dmp"))))
colnames(taxnames) = c("id","", "name","", "species","", "genus","", "family","", "order","", "class","","phylum","", "kingdom","", "superkingdom", "")
message("Read ", length(taxnames$id), " records", "\r", appendLF = T)
setkeyv(taxnames, c("name", "id", rank_subset))
taxranks <- data.table(getnodes(taxonomy_directory))
setkey(taxranks, id, rank)
message("> Taxonomy database ready", "\n", appendLF = T)

# Preparing sequence headers for query
seq_names <- getName(seq_no_taxid)
silvaids <- sapply(strsplit(seq_names, split="\\s"), '[[' ,1)
silvanames <- gsub("*;unidentified","", seq_names)
silvanames <- gsub(".*\\;","", silvanames)
ori_names <- silvanames
for (i in 1:length(silvanames)){
  if (length(grep("sp", silvanames[i]))!=0){
    silvanames[i] <- strsplit(silvanames[i], " ")[[1]][1]
  } else{}
  if (length(grep("strain", silvanames[i]))!=0){
     silvanames[i] <- paste(strsplit(silvanames[i], " ")[[1]][c(1,2)], collapse=" ")
  } else{}
  if (length(grep("\\(*\\)", silvanames[i]))!=0){
     silvanames[i] <- paste(strsplit(silvanames[i], " ")[[1]][c(1,2)], collapse=" ")
  } else{}
}

# Query
message("Extracting taxid & ranks from NCBI taxonomy", "\r", appendLF = T)
taxid <- unlist(sapply(silvanames, taxon2id))
rank <- sapply(taxid, id2rank)
message("Taxid and rank recorded for ", length(na.omit(taxid)), " out of ", length(silvanames), " sequences", "\n", appendLF = T)
taxid[which(is.na(taxid)==T)] <- "not found"
rank[which(is.na(rank)==T)] <- "not found"
message("! Taxid and rank could not be found for ", lenght(taxid)-length(taxid[taxid!="not found"]), " sequences", "\n", appendLF = T)

# Write new fasta with new names
newname <- NULL
for (i in 1:length(taxid)){
  if (silvanames[i]!=ori_names[i]){
    newname[i] <- paste0(silvaids[i]," scientific_name=", silvanames[i], "; taxid=",taxid[i],"; rank=",rank[i],"; original_db_name=", ori_names[i], "; sequence downloaded from SILVA")
  } else {
    newname[i] <- paste0(silvaids[i]," scientific_name=", silvanames[i], "; taxid=",taxid[i],"; rank=",rank[i],"; sequence downloaded from SILVA")
  }
}
seq_no_taxid.char <- as.character(seq_no_taxid)
for (i in 1:length(seq_no_taxid.char)){
  seq_no_taxid.char[i] <- gsub("U", "T", seq_no_taxid.char[i])
}
for (i in 1:length(seq_no_taxid.char)){
  cat(paste0(">", newname[i], "\n", seq_no_taxid.char[i], "\n"), file=outfile, append=T)
}
message(outfile, " created with NCBI taxids", "\n", appendLF = T)
